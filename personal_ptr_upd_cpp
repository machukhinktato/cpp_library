
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
#include <iostream>
 
template<class T>
class Auto_ptr4
{
	T* m_ptr;
public:
	Auto_ptr4(T* ptr = nullptr)
		:m_ptr(ptr)
	{
	}
 
	~Auto_ptr4()
	{
		delete m_ptr;
	}
 
	// Конструктор копирования, который выполняет глубокое копирование x.m_ptr в m_ptr
	Auto_ptr4(const Auto_ptr4& x)
	{
		m_ptr = new T;
		*m_ptr = *x.m_ptr;
	}
 
	// Конструктор перемещения, который передает право собственности на x.m_ptr в m_ptr
	Auto_ptr4(Auto_ptr4&& x)
		: m_ptr(x.m_ptr)
	{
		x.m_ptr = nullptr; // мы поговорим об этом чуть позже
	}
 
	// Оператор присваивания копированием, который выполняет глубокое копирование x.m_ptr в m_ptr
	Auto_ptr4& operator=(const Auto_ptr4& x)
	{
		// Проверка на самоприсваивание
		if (&x == this)
			return *this;
 
		// Удаляем всё, что к этому моменту может хранить указатель 
		delete m_ptr;
 
		// Копируем передаваемый объект
		m_ptr = new T;
		*m_ptr = *x.m_ptr;
 
		return *this;
	}
 
	// Оператор присваивания перемещением, который передает право собственности на x.m_ptr в m_ptr
	Auto_ptr4& operator=(Auto_ptr4&& x)
	{
		// Проверка на самоприсваивание
		if (&x == this)
			return *this;
 
		// Удаляем всё, что к этому моменту может хранить указатель 
		delete m_ptr;
 
		// Передаем право собственности на x.m_ptr в m_ptr
		m_ptr = x.m_ptr;
		x.m_ptr = nullptr; // мы поговорим об этом чуть позже
 
		return *this;
	}
 
	T& operator*() const { return *m_ptr; }
	T* operator->() const { return m_ptr; }
	bool isNull() const { return m_ptr == nullptr; }
};
 
class Item
{
public:
	Item() { std::cout << "Item acquired\n"; }
	~Item() { std::cout << "Item destroyed\n"; }
};
 
Auto_ptr4<Item> generateItem()
{
	Auto_ptr4<Item> item(new Item);
	return item; // это возвращаемое значение приведет к вызову конструктора перемещения
}
 
int main()
{
	Auto_ptr4<Item> mainItem;
	mainItem = generateItem(); // эта операция присваивания приведет к вызову оператора присваивания перемещением
 
	return 0;
}
